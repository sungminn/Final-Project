
#define redPin 5
#define greenPin 6
#define bluePin 3
 
#define FADESPEED 5 

//the time we give the sensor to calibrate (10-60 secs according to the datasheet)
int calibrationTime = 30;       
 
//the time when the sensor outputs a low impulse
long unsigned int lowIn;        
 
//the amount of milliseconds the sensor has to be low
//before we assume all motion has stopped
long unsigned int pause = 5000; 
 
boolean lockLow = true;
boolean takeLowTime; 
 
int pirPin = 9;    //the digital pin connected to the PIR sensor's output

int counter = 0;

//Setup the timing variables
long onInterval = 250;
long offInterval = 250;
long interval = onInterval;

//Track the last time the time was updated 
long lastMillis = millis();

//Variable to track where in the pattern we are 
int flashPatternStepper = 0; 
//Variable to track which pattern is being used 
int flashPatternSelect = 0;

//Array of possible flash patterns
int flashPatterns [2][4] = {{1, 0, 2, 0},
        {1, 2, 1, 2}};
int arrayLength = 4;

//Variables to track color selection
char color1 = 'r';
char color2 = 'b';

void setup() {
  Serial.begin(9600);
  pinMode(pirPin, INPUT);
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  digitalWrite(pirPin, LOW);

   //give the sensor some time to calibrate
  Serial.print("calibrating sensor ");
    for(int i = 0; i < calibrationTime; i++){
      Serial.print(".");
      delay(1000);
      }
    Serial.println(" done");
    Serial.println("SENSOR ACTIVE");
    delay(50);
}

void loop() {
  
  if(digitalRead(pirPin) == HIGH){
       
       handleLEDs();
       if(lockLow){ 
         //makes sure we wait for a transition to LOW before any further output is made:
         lockLow = false;           
         Serial.println("---");
         Serial.print("motion detected at ");
         Serial.print(millis()/1000);
         Serial.println(" sec");
         
         }        
         takeLowTime = true;
       }
 
     if(digitalRead(pirPin) == LOW){      
      digitalWrite(redPin, LOW);  //the led visualizes the sensors output pin state
      digitalWrite(greenPin, LOW);
      digitalWrite(bluePin, LOW);
       if(takeLowTime){
        lowIn = millis();          //save the time of the transition from high to LOW
        takeLowTime = false;       //make sure this is only done at the start of a LOW phase
        }
       //if the sensor is low for more than the given pause,
       //we assume that no more motion is going to happen
       if(!lockLow && millis() - lowIn > pause){ 
           //makes sure this block of code is only executed again after
           //a new motion sequence has been detected
           lockLow = true;                       
           Serial.print("motion ended at ");      //output
           Serial.print((millis() - pause)/1000);
           Serial.println(" sec");
           delay(50);
           }
       }
       
}
void handleLEDs()
{
  //Check to see if lights should be on or off
  if(flashPatterns[flashPatternSelect][flashPatternStepper] == 0)
  {
    interval = offInterval;
  }
  else
  {
    interval = onInterval;
  }

  //Check if we need to advance flashPatternStepper to the next place in the sequence
  if(millis() - lastMillis > interval)
  {
    lastMillis = millis();
    flashPatternStepper++;
  
    if(flashPatternStepper > arrayLength-1)
    {
      flashPatternStepper = 0;
    }
  }

  //colorSelect decides which LED Pins should be active, if any
//  colorSelect();
  int colors[3];
  int fadespeed = 30; // change to change fade speed
  getRGB((millis() % (360*fadespeed))/fadespeed, 255, 255, colors);
  analogWrite(redPin, colors[0]);
  analogWrite(greenPin, colors[1]);
  analogWrite(bluePin, colors[2]);
}

const byte dim_curve[] = {
    0,   1,   1,   2,   2,   2,   2,   2,   2,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   4,   4,   4,   4,
    4,   4,   4,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   6,   6,   6,
    6,   6,   6,   6,   6,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,
    8,   8,   9,   9,   9,   9,   9,   9,   10,  10,  10,  10,  10,  11,  11,  11,
    11,  11,  12,  12,  12,  12,  12,  13,  13,  13,  13,  14,  14,  14,  14,  15,
    15,  15,  16,  16,  16,  16,  17,  17,  17,  18,  18,  18,  19,  19,  19,  20,
    20,  20,  21,  21,  22,  22,  22,  23,  23,  24,  24,  25,  25,  25,  26,  26,
    27,  27,  28,  28,  29,  29,  30,  30,  31,  32,  32,  33,  33,  34,  35,  35,
    36,  36,  37,  38,  38,  39,  40,  40,  41,  42,  43,  43,  44,  45,  46,  47,
    48,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,
    63,  64,  65,  66,  68,  69,  70,  71,  73,  74,  75,  76,  78,  79,  81,  82,
    83,  85,  86,  88,  90,  91,  93,  94,  96,  98,  99,  101, 103, 105, 107, 109,
    110, 112, 114, 116, 118, 121, 123, 125, 127, 129, 132, 134, 136, 139, 141, 144,
    146, 149, 151, 154, 157, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 190,
    193, 196, 200, 203, 207, 211, 214, 218, 222, 226, 230, 234, 238, 242, 248, 255,
};

void getRGB(int hue, int sat, int val, int colors[3]) { 
  /* convert hue, saturation and brightness ( HSB/HSV ) to RGB
     The dim_curve is used only on brightness/value and on saturation (inverted).
     This looks the most natural.      
  */
 
  val = dim_curve[val];
  sat = 255-dim_curve[255-sat];
 
  int r;
  int g;
  int b;
  int base;
 
  if (sat == 0) { // Acromatic color (gray). Hue doesn't mind.
    colors[0]=val;
    colors[1]=val;
    colors[2]=val;  
  } else  { 
 
    base = ((255 - sat) * val)>>8;
 
    switch(hue/60) {
    case 0:
        r = val;
        g = (((val-base)*hue)/60)+base;
        b = base;
    break;
 
    case 1:
        r = (((val-base)*(60-(hue%60)))/60)+base;
        g = val;
        b = base;
    break;
 
    case 2:
        r = base;
        g = val;
        b = (((val-base)*(hue%60))/60)+base;
    break;
 
    case 3:
        r = base;
        g = (((val-base)*(60-(hue%60)))/60)+base;
        b = val;
    break;
 
    case 4:
        r = (((val-base)*(hue%60))/60)+base;
        g = base;
        b = val;
    break;
 
    case 5:
        r = val;
        g = base;
        b = (((val-base)*(60-(hue%60)))/60)+base;
    break;
    }
 
    colors[0]=r;
    colors[1]=g;
    colors[2]=b; 
  }   
}

//Control the colors
void colorSelect()
{
  char colorChoice;

  ///Set colorChoice based on where we are in the sequence
  switch (flashPatterns[flashPatternSelect][flashPatternStepper])
  {
    case 1:
      colorChoice = color1;
      break;

    case 2:
      colorChoice = color2;
      break;

    case 0:
      colorChoice = 'o';
      break;
  }

  //Actually turn on/off the LED pin(s)
  switch(colorChoice)
  {
        case 'y':     
            digitalWrite(redPin, LOW);
            digitalWrite(greenPin, LOW);
            digitalWrite(bluePin, HIGH);
            break;

        case 'w':     
            digitalWrite(redPin, LOW);
            digitalWrite(greenPin, LOW);
            digitalWrite(bluePin, LOW);
            break;

        case 'r':     
            digitalWrite(redPin, LOW);
            digitalWrite(greenPin, HIGH);
            digitalWrite(bluePin, HIGH);
            break;

        case 'g':     
          digitalWrite(redPin, HIGH);
            digitalWrite(greenPin, LOW);
            digitalWrite(bluePin, HIGH);
            break;

        case 'b':     
            digitalWrite(redPin, HIGH);
            digitalWrite(greenPin, HIGH);
            digitalWrite(bluePin, LOW);
            break;
  
        case 'p':     
            digitalWrite(redPin, LOW);
            digitalWrite(greenPin, HIGH);
            digitalWrite(bluePin, LOW);
            break;
            

        case 'c':     
            digitalWrite(redPin, HIGH);
            digitalWrite(greenPin, LOW);
            digitalWrite(bluePin, LOW);
            break;

        case 'o':
            digitalWrite(redPin, HIGH);
            digitalWrite(greenPin, HIGH);
            digitalWrite(bluePin, HIGH);
            break;
    }
}
